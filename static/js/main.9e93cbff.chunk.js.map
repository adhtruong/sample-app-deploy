{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["sketch","p","setup","createCanvas","tiles","noLoop","draw","background","noFill","strokeWeight","stroke","strokeCap","SQUARE","i","j","push","translate","rotate","Math","floor","random","PI","arc","pop","App","props","myRef","myP5","React","createRef","this","current","p5","style","position","left","top","transform","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAMIA,EAAS,SAAEC,GAIbA,EAAEC,MAAQ,WACND,EAAEE,aAAaC,IAAkBA,KACjCH,EAAEI,UAGNJ,EAAEK,KAAO,WACLL,EAAEM,WAAW,GACbN,EAAEO,SACFP,EAAEQ,aAAa,IACfR,EAAES,OAAO,KACTT,EAAEU,UAAUV,EAAEW,QACd,IAAK,IAAIC,EAAE,EAAGA,EAdN,GAceA,IACrB,IAAK,IAAIC,EAAE,EAAGA,EAfR,GAeiBA,IACrBb,EAAEc,OACFd,EAAEe,UAhBK,IAgBMH,EAAI,IAhBV,IAgB4BC,EAAG,KACtCb,EAAEgB,OAAOC,KAAKC,MAAmB,EAAblB,EAAEmB,UAAgBnB,EAAEoB,GAAK,GAC7CpB,EAAEqB,KAAI,IAAiB,GAlBhB,MAkBqD,EAAGrB,EAAEoB,GAAG,GACpEpB,EAAEqB,IAAI,GAAgB,GAnBf,MAmBmDrB,EAAEoB,GAAW,EAAPpB,EAAEoB,GAAO,GACzEpB,EAAEsB,QAsCGC,E,kDA3Bb,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAJRC,WAGwB,IAFxBC,UAEwB,EAEtB,EAAKD,MAAQE,IAAMC,YACnB,EAAKF,KAAO,KAHU,E,gEAOK,OAAvBG,KAAKJ,MAAMK,UAEfD,KAAKH,KAAO,IAAIK,IAAGhC,EAAQ8B,KAAKJ,MAAMK,Y,+BAItC,OACE,yBACAE,MAAO,CACLC,SAAU,WACVC,KAAK,MACLC,IAAK,MACLC,UAAW,yBAEbC,IAAKR,KAAKJ,Y,GAzBEE,IAAMW,WCvBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9e93cbff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nimport p5 from 'p5';\r\n\r\n\r\nlet sketch = ( p: p5 ) => {\r\n  let tiles = 12;\r\n  let tileSize = 50;\r\n\r\n  p.setup = () => {\r\n      p.createCanvas(tiles * tileSize, tiles * tileSize);\r\n      p.noLoop();\r\n  }\r\n\r\n  p.draw = () => {\r\n      p.background(0);\r\n      p.noFill();\r\n      p.strokeWeight(10);\r\n      p.stroke(255);\r\n      p.strokeCap(p.SQUARE);\r\n      for (let i=0; i<tiles; i++) {\r\n        for (let j=0; j<tiles; j++) {\r\n          p.push()\r\n          p.translate((i + 0.5) * tileSize, (j +0.5) * tileSize);\r\n          p.rotate(Math.floor(p.random() * 4) * p.PI / 2);\r\n          p.arc(-0.5 * tileSize, -0.5 * tileSize, tileSize, tileSize, 0, p.PI/2);\r\n          p.arc(0.5 * tileSize, 0.5 * tileSize, tileSize, tileSize, p.PI, p.PI * 3/2);\r\n          p.pop()\r\n        }\r\n      }\r\n  }\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n  myRef: React.RefObject<HTMLDivElement>;\r\n  myP5: p5 | null;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.myRef = React.createRef();\r\n    this.myP5 = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.myRef.current === null)\r\n      return\r\n    this.myP5 = new p5(sketch, this.myRef.current);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div \r\n      style={{\r\n        position: \"absolute\", \r\n        left:'50%', \r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n      }}\r\n      ref={this.myRef}>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}